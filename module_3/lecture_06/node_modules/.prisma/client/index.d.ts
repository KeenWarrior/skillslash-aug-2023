
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ParkingLot
 * 
 */
export type ParkingLot = $Result.DefaultSelection<Prisma.$ParkingLotPayload>
/**
 * Model PartkingSpot
 * 
 */
export type PartkingSpot = $Result.DefaultSelection<Prisma.$PartkingSpotPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const VehicleType: {
  TWO_VEHILER: 'TWO_VEHILER',
  THREE_VEHILER: 'THREE_VEHILER',
  FOUR_VEHILER: 'FOUR_VEHILER'
};

export type VehicleType = (typeof VehicleType)[keyof typeof VehicleType]

}

export type VehicleType = $Enums.VehicleType

export const VehicleType: typeof $Enums.VehicleType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ParkingLots
 * const parkingLots = await prisma.parkingLot.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ParkingLots
   * const parkingLots = await prisma.parkingLot.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.parkingLot`: Exposes CRUD operations for the **ParkingLot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParkingLots
    * const parkingLots = await prisma.parkingLot.findMany()
    * ```
    */
  get parkingLot(): Prisma.ParkingLotDelegate<ExtArgs>;

  /**
   * `prisma.partkingSpot`: Exposes CRUD operations for the **PartkingSpot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PartkingSpots
    * const partkingSpots = await prisma.partkingSpot.findMany()
    * ```
    */
  get partkingSpot(): Prisma.PartkingSpotDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.1
   * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ParkingLot: 'ParkingLot',
    PartkingSpot: 'PartkingSpot'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'parkingLot' | 'partkingSpot'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      ParkingLot: {
        payload: Prisma.$ParkingLotPayload<ExtArgs>
        fields: Prisma.ParkingLotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParkingLotFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParkingLotFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          findFirst: {
            args: Prisma.ParkingLotFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParkingLotFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          findMany: {
            args: Prisma.ParkingLotFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>[]
          }
          create: {
            args: Prisma.ParkingLotCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          createMany: {
            args: Prisma.ParkingLotCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ParkingLotDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          update: {
            args: Prisma.ParkingLotUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          deleteMany: {
            args: Prisma.ParkingLotDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ParkingLotUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ParkingLotUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ParkingLotPayload>
          }
          aggregate: {
            args: Prisma.ParkingLotAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateParkingLot>
          }
          groupBy: {
            args: Prisma.ParkingLotGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ParkingLotGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParkingLotCountArgs<ExtArgs>,
            result: $Utils.Optional<ParkingLotCountAggregateOutputType> | number
          }
        }
      }
      PartkingSpot: {
        payload: Prisma.$PartkingSpotPayload<ExtArgs>
        fields: Prisma.PartkingSpotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartkingSpotFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PartkingSpotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartkingSpotFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PartkingSpotPayload>
          }
          findFirst: {
            args: Prisma.PartkingSpotFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PartkingSpotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartkingSpotFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PartkingSpotPayload>
          }
          findMany: {
            args: Prisma.PartkingSpotFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PartkingSpotPayload>[]
          }
          create: {
            args: Prisma.PartkingSpotCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PartkingSpotPayload>
          }
          createMany: {
            args: Prisma.PartkingSpotCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PartkingSpotDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PartkingSpotPayload>
          }
          update: {
            args: Prisma.PartkingSpotUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PartkingSpotPayload>
          }
          deleteMany: {
            args: Prisma.PartkingSpotDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PartkingSpotUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PartkingSpotUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PartkingSpotPayload>
          }
          aggregate: {
            args: Prisma.PartkingSpotAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePartkingSpot>
          }
          groupBy: {
            args: Prisma.PartkingSpotGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PartkingSpotGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartkingSpotCountArgs<ExtArgs>,
            result: $Utils.Optional<PartkingSpotCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ParkingLotCountOutputType
   */

  export type ParkingLotCountOutputType = {
    partkingSpots: number
  }

  export type ParkingLotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partkingSpots?: boolean | ParkingLotCountOutputTypeCountPartkingSpotsArgs
  }

  // Custom InputTypes

  /**
   * ParkingLotCountOutputType without action
   */
  export type ParkingLotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLotCountOutputType
     */
    select?: ParkingLotCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ParkingLotCountOutputType without action
   */
  export type ParkingLotCountOutputTypeCountPartkingSpotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartkingSpotWhereInput
  }



  /**
   * Models
   */

  /**
   * Model ParkingLot
   */

  export type AggregateParkingLot = {
    _count: ParkingLotCountAggregateOutputType | null
    _avg: ParkingLotAvgAggregateOutputType | null
    _sum: ParkingLotSumAggregateOutputType | null
    _min: ParkingLotMinAggregateOutputType | null
    _max: ParkingLotMaxAggregateOutputType | null
  }

  export type ParkingLotAvgAggregateOutputType = {
    id: number | null
  }

  export type ParkingLotSumAggregateOutputType = {
    id: number | null
  }

  export type ParkingLotMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ParkingLotMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ParkingLotCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ParkingLotAvgAggregateInputType = {
    id?: true
  }

  export type ParkingLotSumAggregateInputType = {
    id?: true
  }

  export type ParkingLotMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ParkingLotMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ParkingLotCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ParkingLotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingLot to aggregate.
     */
    where?: ParkingLotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingLots to fetch.
     */
    orderBy?: ParkingLotOrderByWithRelationInput | ParkingLotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParkingLotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingLots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingLots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParkingLots
    **/
    _count?: true | ParkingLotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParkingLotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParkingLotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParkingLotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParkingLotMaxAggregateInputType
  }

  export type GetParkingLotAggregateType<T extends ParkingLotAggregateArgs> = {
        [P in keyof T & keyof AggregateParkingLot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParkingLot[P]>
      : GetScalarType<T[P], AggregateParkingLot[P]>
  }




  export type ParkingLotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParkingLotWhereInput
    orderBy?: ParkingLotOrderByWithAggregationInput | ParkingLotOrderByWithAggregationInput[]
    by: ParkingLotScalarFieldEnum[] | ParkingLotScalarFieldEnum
    having?: ParkingLotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParkingLotCountAggregateInputType | true
    _avg?: ParkingLotAvgAggregateInputType
    _sum?: ParkingLotSumAggregateInputType
    _min?: ParkingLotMinAggregateInputType
    _max?: ParkingLotMaxAggregateInputType
  }

  export type ParkingLotGroupByOutputType = {
    id: number
    name: string
    _count: ParkingLotCountAggregateOutputType | null
    _avg: ParkingLotAvgAggregateOutputType | null
    _sum: ParkingLotSumAggregateOutputType | null
    _min: ParkingLotMinAggregateOutputType | null
    _max: ParkingLotMaxAggregateOutputType | null
  }

  type GetParkingLotGroupByPayload<T extends ParkingLotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParkingLotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParkingLotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParkingLotGroupByOutputType[P]>
            : GetScalarType<T[P], ParkingLotGroupByOutputType[P]>
        }
      >
    >


  export type ParkingLotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    partkingSpots?: boolean | ParkingLot$partkingSpotsArgs<ExtArgs>
    _count?: boolean | ParkingLotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parkingLot"]>

  export type ParkingLotSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ParkingLotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partkingSpots?: boolean | ParkingLot$partkingSpotsArgs<ExtArgs>
    _count?: boolean | ParkingLotCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ParkingLotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParkingLot"
    objects: {
      partkingSpots: Prisma.$PartkingSpotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["parkingLot"]>
    composites: {}
  }


  type ParkingLotGetPayload<S extends boolean | null | undefined | ParkingLotDefaultArgs> = $Result.GetResult<Prisma.$ParkingLotPayload, S>

  type ParkingLotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParkingLotFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParkingLotCountAggregateInputType | true
    }

  export interface ParkingLotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParkingLot'], meta: { name: 'ParkingLot' } }
    /**
     * Find zero or one ParkingLot that matches the filter.
     * @param {ParkingLotFindUniqueArgs} args - Arguments to find a ParkingLot
     * @example
     * // Get one ParkingLot
     * const parkingLot = await prisma.parkingLot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParkingLotFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotFindUniqueArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ParkingLot that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ParkingLotFindUniqueOrThrowArgs} args - Arguments to find a ParkingLot
     * @example
     * // Get one ParkingLot
     * const parkingLot = await prisma.parkingLot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ParkingLotFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ParkingLot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotFindFirstArgs} args - Arguments to find a ParkingLot
     * @example
     * // Get one ParkingLot
     * const parkingLot = await prisma.parkingLot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParkingLotFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotFindFirstArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ParkingLot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotFindFirstOrThrowArgs} args - Arguments to find a ParkingLot
     * @example
     * // Get one ParkingLot
     * const parkingLot = await prisma.parkingLot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ParkingLotFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ParkingLots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParkingLots
     * const parkingLots = await prisma.parkingLot.findMany()
     * 
     * // Get first 10 ParkingLots
     * const parkingLots = await prisma.parkingLot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parkingLotWithIdOnly = await prisma.parkingLot.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ParkingLotFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ParkingLot.
     * @param {ParkingLotCreateArgs} args - Arguments to create a ParkingLot.
     * @example
     * // Create one ParkingLot
     * const ParkingLot = await prisma.parkingLot.create({
     *   data: {
     *     // ... data to create a ParkingLot
     *   }
     * })
     * 
    **/
    create<T extends ParkingLotCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotCreateArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ParkingLots.
     *     @param {ParkingLotCreateManyArgs} args - Arguments to create many ParkingLots.
     *     @example
     *     // Create many ParkingLots
     *     const parkingLot = await prisma.parkingLot.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParkingLotCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ParkingLot.
     * @param {ParkingLotDeleteArgs} args - Arguments to delete one ParkingLot.
     * @example
     * // Delete one ParkingLot
     * const ParkingLot = await prisma.parkingLot.delete({
     *   where: {
     *     // ... filter to delete one ParkingLot
     *   }
     * })
     * 
    **/
    delete<T extends ParkingLotDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotDeleteArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ParkingLot.
     * @param {ParkingLotUpdateArgs} args - Arguments to update one ParkingLot.
     * @example
     * // Update one ParkingLot
     * const parkingLot = await prisma.parkingLot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParkingLotUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotUpdateArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ParkingLots.
     * @param {ParkingLotDeleteManyArgs} args - Arguments to filter ParkingLots to delete.
     * @example
     * // Delete a few ParkingLots
     * const { count } = await prisma.parkingLot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParkingLotDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ParkingLotDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParkingLots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParkingLots
     * const parkingLot = await prisma.parkingLot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParkingLotUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParkingLot.
     * @param {ParkingLotUpsertArgs} args - Arguments to update or create a ParkingLot.
     * @example
     * // Update or create a ParkingLot
     * const parkingLot = await prisma.parkingLot.upsert({
     *   create: {
     *     // ... data to create a ParkingLot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParkingLot we want to update
     *   }
     * })
    **/
    upsert<T extends ParkingLotUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ParkingLotUpsertArgs<ExtArgs>>
    ): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ParkingLots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotCountArgs} args - Arguments to filter ParkingLots to count.
     * @example
     * // Count the number of ParkingLots
     * const count = await prisma.parkingLot.count({
     *   where: {
     *     // ... the filter for the ParkingLots we want to count
     *   }
     * })
    **/
    count<T extends ParkingLotCountArgs>(
      args?: Subset<T, ParkingLotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParkingLotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParkingLot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParkingLotAggregateArgs>(args: Subset<T, ParkingLotAggregateArgs>): Prisma.PrismaPromise<GetParkingLotAggregateType<T>>

    /**
     * Group by ParkingLot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParkingLotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParkingLotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParkingLotGroupByArgs['orderBy'] }
        : { orderBy?: ParkingLotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParkingLotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParkingLotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParkingLot model
   */
  readonly fields: ParkingLotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParkingLot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParkingLotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    partkingSpots<T extends ParkingLot$partkingSpotsArgs<ExtArgs> = {}>(args?: Subset<T, ParkingLot$partkingSpotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ParkingLot model
   */ 
  interface ParkingLotFieldRefs {
    readonly id: FieldRef<"ParkingLot", 'Int'>
    readonly name: FieldRef<"ParkingLot", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ParkingLot findUnique
   */
  export type ParkingLotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLot to fetch.
     */
    where: ParkingLotWhereUniqueInput
  }


  /**
   * ParkingLot findUniqueOrThrow
   */
  export type ParkingLotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLot to fetch.
     */
    where: ParkingLotWhereUniqueInput
  }


  /**
   * ParkingLot findFirst
   */
  export type ParkingLotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLot to fetch.
     */
    where?: ParkingLotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingLots to fetch.
     */
    orderBy?: ParkingLotOrderByWithRelationInput | ParkingLotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingLots.
     */
    cursor?: ParkingLotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingLots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingLots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingLots.
     */
    distinct?: ParkingLotScalarFieldEnum | ParkingLotScalarFieldEnum[]
  }


  /**
   * ParkingLot findFirstOrThrow
   */
  export type ParkingLotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLot to fetch.
     */
    where?: ParkingLotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingLots to fetch.
     */
    orderBy?: ParkingLotOrderByWithRelationInput | ParkingLotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParkingLots.
     */
    cursor?: ParkingLotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingLots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingLots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParkingLots.
     */
    distinct?: ParkingLotScalarFieldEnum | ParkingLotScalarFieldEnum[]
  }


  /**
   * ParkingLot findMany
   */
  export type ParkingLotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter, which ParkingLots to fetch.
     */
    where?: ParkingLotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParkingLots to fetch.
     */
    orderBy?: ParkingLotOrderByWithRelationInput | ParkingLotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParkingLots.
     */
    cursor?: ParkingLotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParkingLots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParkingLots.
     */
    skip?: number
    distinct?: ParkingLotScalarFieldEnum | ParkingLotScalarFieldEnum[]
  }


  /**
   * ParkingLot create
   */
  export type ParkingLotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * The data needed to create a ParkingLot.
     */
    data: XOR<ParkingLotCreateInput, ParkingLotUncheckedCreateInput>
  }


  /**
   * ParkingLot createMany
   */
  export type ParkingLotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParkingLots.
     */
    data: ParkingLotCreateManyInput | ParkingLotCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ParkingLot update
   */
  export type ParkingLotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * The data needed to update a ParkingLot.
     */
    data: XOR<ParkingLotUpdateInput, ParkingLotUncheckedUpdateInput>
    /**
     * Choose, which ParkingLot to update.
     */
    where: ParkingLotWhereUniqueInput
  }


  /**
   * ParkingLot updateMany
   */
  export type ParkingLotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParkingLots.
     */
    data: XOR<ParkingLotUpdateManyMutationInput, ParkingLotUncheckedUpdateManyInput>
    /**
     * Filter which ParkingLots to update
     */
    where?: ParkingLotWhereInput
  }


  /**
   * ParkingLot upsert
   */
  export type ParkingLotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * The filter to search for the ParkingLot to update in case it exists.
     */
    where: ParkingLotWhereUniqueInput
    /**
     * In case the ParkingLot found by the `where` argument doesn't exist, create a new ParkingLot with this data.
     */
    create: XOR<ParkingLotCreateInput, ParkingLotUncheckedCreateInput>
    /**
     * In case the ParkingLot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParkingLotUpdateInput, ParkingLotUncheckedUpdateInput>
  }


  /**
   * ParkingLot delete
   */
  export type ParkingLotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
    /**
     * Filter which ParkingLot to delete.
     */
    where: ParkingLotWhereUniqueInput
  }


  /**
   * ParkingLot deleteMany
   */
  export type ParkingLotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParkingLots to delete
     */
    where?: ParkingLotWhereInput
  }


  /**
   * ParkingLot.partkingSpots
   */
  export type ParkingLot$partkingSpotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    where?: PartkingSpotWhereInput
    orderBy?: PartkingSpotOrderByWithRelationInput | PartkingSpotOrderByWithRelationInput[]
    cursor?: PartkingSpotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartkingSpotScalarFieldEnum | PartkingSpotScalarFieldEnum[]
  }


  /**
   * ParkingLot without action
   */
  export type ParkingLotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParkingLot
     */
    select?: ParkingLotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ParkingLotInclude<ExtArgs> | null
  }



  /**
   * Model PartkingSpot
   */

  export type AggregatePartkingSpot = {
    _count: PartkingSpotCountAggregateOutputType | null
    _avg: PartkingSpotAvgAggregateOutputType | null
    _sum: PartkingSpotSumAggregateOutputType | null
    _min: PartkingSpotMinAggregateOutputType | null
    _max: PartkingSpotMaxAggregateOutputType | null
  }

  export type PartkingSpotAvgAggregateOutputType = {
    id: number | null
    parkingLotId: number | null
    floorNumber: number | null
  }

  export type PartkingSpotSumAggregateOutputType = {
    id: number | null
    parkingLotId: number | null
    floorNumber: number | null
  }

  export type PartkingSpotMinAggregateOutputType = {
    id: number | null
    parkingLotId: number | null
    floorNumber: number | null
    vehicleType: $Enums.VehicleType | null
  }

  export type PartkingSpotMaxAggregateOutputType = {
    id: number | null
    parkingLotId: number | null
    floorNumber: number | null
    vehicleType: $Enums.VehicleType | null
  }

  export type PartkingSpotCountAggregateOutputType = {
    id: number
    parkingLotId: number
    floorNumber: number
    vehicleType: number
    _all: number
  }


  export type PartkingSpotAvgAggregateInputType = {
    id?: true
    parkingLotId?: true
    floorNumber?: true
  }

  export type PartkingSpotSumAggregateInputType = {
    id?: true
    parkingLotId?: true
    floorNumber?: true
  }

  export type PartkingSpotMinAggregateInputType = {
    id?: true
    parkingLotId?: true
    floorNumber?: true
    vehicleType?: true
  }

  export type PartkingSpotMaxAggregateInputType = {
    id?: true
    parkingLotId?: true
    floorNumber?: true
    vehicleType?: true
  }

  export type PartkingSpotCountAggregateInputType = {
    id?: true
    parkingLotId?: true
    floorNumber?: true
    vehicleType?: true
    _all?: true
  }

  export type PartkingSpotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartkingSpot to aggregate.
     */
    where?: PartkingSpotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartkingSpots to fetch.
     */
    orderBy?: PartkingSpotOrderByWithRelationInput | PartkingSpotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartkingSpotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartkingSpots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartkingSpots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PartkingSpots
    **/
    _count?: true | PartkingSpotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartkingSpotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartkingSpotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartkingSpotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartkingSpotMaxAggregateInputType
  }

  export type GetPartkingSpotAggregateType<T extends PartkingSpotAggregateArgs> = {
        [P in keyof T & keyof AggregatePartkingSpot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartkingSpot[P]>
      : GetScalarType<T[P], AggregatePartkingSpot[P]>
  }




  export type PartkingSpotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartkingSpotWhereInput
    orderBy?: PartkingSpotOrderByWithAggregationInput | PartkingSpotOrderByWithAggregationInput[]
    by: PartkingSpotScalarFieldEnum[] | PartkingSpotScalarFieldEnum
    having?: PartkingSpotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartkingSpotCountAggregateInputType | true
    _avg?: PartkingSpotAvgAggregateInputType
    _sum?: PartkingSpotSumAggregateInputType
    _min?: PartkingSpotMinAggregateInputType
    _max?: PartkingSpotMaxAggregateInputType
  }

  export type PartkingSpotGroupByOutputType = {
    id: number
    parkingLotId: number
    floorNumber: number
    vehicleType: $Enums.VehicleType
    _count: PartkingSpotCountAggregateOutputType | null
    _avg: PartkingSpotAvgAggregateOutputType | null
    _sum: PartkingSpotSumAggregateOutputType | null
    _min: PartkingSpotMinAggregateOutputType | null
    _max: PartkingSpotMaxAggregateOutputType | null
  }

  type GetPartkingSpotGroupByPayload<T extends PartkingSpotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartkingSpotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartkingSpotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartkingSpotGroupByOutputType[P]>
            : GetScalarType<T[P], PartkingSpotGroupByOutputType[P]>
        }
      >
    >


  export type PartkingSpotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parkingLotId?: boolean
    floorNumber?: boolean
    vehicleType?: boolean
    parkingLot?: boolean | ParkingLotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partkingSpot"]>

  export type PartkingSpotSelectScalar = {
    id?: boolean
    parkingLotId?: boolean
    floorNumber?: boolean
    vehicleType?: boolean
  }

  export type PartkingSpotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parkingLot?: boolean | ParkingLotDefaultArgs<ExtArgs>
  }


  export type $PartkingSpotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PartkingSpot"
    objects: {
      parkingLot: Prisma.$ParkingLotPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      parkingLotId: number
      floorNumber: number
      vehicleType: $Enums.VehicleType
    }, ExtArgs["result"]["partkingSpot"]>
    composites: {}
  }


  type PartkingSpotGetPayload<S extends boolean | null | undefined | PartkingSpotDefaultArgs> = $Result.GetResult<Prisma.$PartkingSpotPayload, S>

  type PartkingSpotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PartkingSpotFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PartkingSpotCountAggregateInputType | true
    }

  export interface PartkingSpotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PartkingSpot'], meta: { name: 'PartkingSpot' } }
    /**
     * Find zero or one PartkingSpot that matches the filter.
     * @param {PartkingSpotFindUniqueArgs} args - Arguments to find a PartkingSpot
     * @example
     * // Get one PartkingSpot
     * const partkingSpot = await prisma.partkingSpot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PartkingSpotFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PartkingSpotFindUniqueArgs<ExtArgs>>
    ): Prisma__PartkingSpotClient<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PartkingSpot that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PartkingSpotFindUniqueOrThrowArgs} args - Arguments to find a PartkingSpot
     * @example
     * // Get one PartkingSpot
     * const partkingSpot = await prisma.partkingSpot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PartkingSpotFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PartkingSpotFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PartkingSpotClient<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PartkingSpot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartkingSpotFindFirstArgs} args - Arguments to find a PartkingSpot
     * @example
     * // Get one PartkingSpot
     * const partkingSpot = await prisma.partkingSpot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PartkingSpotFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PartkingSpotFindFirstArgs<ExtArgs>>
    ): Prisma__PartkingSpotClient<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PartkingSpot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartkingSpotFindFirstOrThrowArgs} args - Arguments to find a PartkingSpot
     * @example
     * // Get one PartkingSpot
     * const partkingSpot = await prisma.partkingSpot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PartkingSpotFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PartkingSpotFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PartkingSpotClient<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PartkingSpots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartkingSpotFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PartkingSpots
     * const partkingSpots = await prisma.partkingSpot.findMany()
     * 
     * // Get first 10 PartkingSpots
     * const partkingSpots = await prisma.partkingSpot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partkingSpotWithIdOnly = await prisma.partkingSpot.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PartkingSpotFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PartkingSpotFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PartkingSpot.
     * @param {PartkingSpotCreateArgs} args - Arguments to create a PartkingSpot.
     * @example
     * // Create one PartkingSpot
     * const PartkingSpot = await prisma.partkingSpot.create({
     *   data: {
     *     // ... data to create a PartkingSpot
     *   }
     * })
     * 
    **/
    create<T extends PartkingSpotCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PartkingSpotCreateArgs<ExtArgs>>
    ): Prisma__PartkingSpotClient<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PartkingSpots.
     *     @param {PartkingSpotCreateManyArgs} args - Arguments to create many PartkingSpots.
     *     @example
     *     // Create many PartkingSpots
     *     const partkingSpot = await prisma.partkingSpot.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PartkingSpotCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PartkingSpotCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PartkingSpot.
     * @param {PartkingSpotDeleteArgs} args - Arguments to delete one PartkingSpot.
     * @example
     * // Delete one PartkingSpot
     * const PartkingSpot = await prisma.partkingSpot.delete({
     *   where: {
     *     // ... filter to delete one PartkingSpot
     *   }
     * })
     * 
    **/
    delete<T extends PartkingSpotDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PartkingSpotDeleteArgs<ExtArgs>>
    ): Prisma__PartkingSpotClient<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PartkingSpot.
     * @param {PartkingSpotUpdateArgs} args - Arguments to update one PartkingSpot.
     * @example
     * // Update one PartkingSpot
     * const partkingSpot = await prisma.partkingSpot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PartkingSpotUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PartkingSpotUpdateArgs<ExtArgs>>
    ): Prisma__PartkingSpotClient<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PartkingSpots.
     * @param {PartkingSpotDeleteManyArgs} args - Arguments to filter PartkingSpots to delete.
     * @example
     * // Delete a few PartkingSpots
     * const { count } = await prisma.partkingSpot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PartkingSpotDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PartkingSpotDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PartkingSpots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartkingSpotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PartkingSpots
     * const partkingSpot = await prisma.partkingSpot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PartkingSpotUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PartkingSpotUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PartkingSpot.
     * @param {PartkingSpotUpsertArgs} args - Arguments to update or create a PartkingSpot.
     * @example
     * // Update or create a PartkingSpot
     * const partkingSpot = await prisma.partkingSpot.upsert({
     *   create: {
     *     // ... data to create a PartkingSpot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PartkingSpot we want to update
     *   }
     * })
    **/
    upsert<T extends PartkingSpotUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PartkingSpotUpsertArgs<ExtArgs>>
    ): Prisma__PartkingSpotClient<$Result.GetResult<Prisma.$PartkingSpotPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PartkingSpots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartkingSpotCountArgs} args - Arguments to filter PartkingSpots to count.
     * @example
     * // Count the number of PartkingSpots
     * const count = await prisma.partkingSpot.count({
     *   where: {
     *     // ... the filter for the PartkingSpots we want to count
     *   }
     * })
    **/
    count<T extends PartkingSpotCountArgs>(
      args?: Subset<T, PartkingSpotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartkingSpotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PartkingSpot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartkingSpotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartkingSpotAggregateArgs>(args: Subset<T, PartkingSpotAggregateArgs>): Prisma.PrismaPromise<GetPartkingSpotAggregateType<T>>

    /**
     * Group by PartkingSpot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartkingSpotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartkingSpotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartkingSpotGroupByArgs['orderBy'] }
        : { orderBy?: PartkingSpotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartkingSpotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartkingSpotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PartkingSpot model
   */
  readonly fields: PartkingSpotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PartkingSpot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartkingSpotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    parkingLot<T extends ParkingLotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParkingLotDefaultArgs<ExtArgs>>): Prisma__ParkingLotClient<$Result.GetResult<Prisma.$ParkingLotPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PartkingSpot model
   */ 
  interface PartkingSpotFieldRefs {
    readonly id: FieldRef<"PartkingSpot", 'Int'>
    readonly parkingLotId: FieldRef<"PartkingSpot", 'Int'>
    readonly floorNumber: FieldRef<"PartkingSpot", 'Int'>
    readonly vehicleType: FieldRef<"PartkingSpot", 'VehicleType'>
  }
    

  // Custom InputTypes

  /**
   * PartkingSpot findUnique
   */
  export type PartkingSpotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which PartkingSpot to fetch.
     */
    where: PartkingSpotWhereUniqueInput
  }


  /**
   * PartkingSpot findUniqueOrThrow
   */
  export type PartkingSpotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which PartkingSpot to fetch.
     */
    where: PartkingSpotWhereUniqueInput
  }


  /**
   * PartkingSpot findFirst
   */
  export type PartkingSpotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which PartkingSpot to fetch.
     */
    where?: PartkingSpotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartkingSpots to fetch.
     */
    orderBy?: PartkingSpotOrderByWithRelationInput | PartkingSpotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartkingSpots.
     */
    cursor?: PartkingSpotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartkingSpots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartkingSpots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartkingSpots.
     */
    distinct?: PartkingSpotScalarFieldEnum | PartkingSpotScalarFieldEnum[]
  }


  /**
   * PartkingSpot findFirstOrThrow
   */
  export type PartkingSpotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which PartkingSpot to fetch.
     */
    where?: PartkingSpotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartkingSpots to fetch.
     */
    orderBy?: PartkingSpotOrderByWithRelationInput | PartkingSpotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PartkingSpots.
     */
    cursor?: PartkingSpotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartkingSpots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartkingSpots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PartkingSpots.
     */
    distinct?: PartkingSpotScalarFieldEnum | PartkingSpotScalarFieldEnum[]
  }


  /**
   * PartkingSpot findMany
   */
  export type PartkingSpotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    /**
     * Filter, which PartkingSpots to fetch.
     */
    where?: PartkingSpotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PartkingSpots to fetch.
     */
    orderBy?: PartkingSpotOrderByWithRelationInput | PartkingSpotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PartkingSpots.
     */
    cursor?: PartkingSpotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PartkingSpots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PartkingSpots.
     */
    skip?: number
    distinct?: PartkingSpotScalarFieldEnum | PartkingSpotScalarFieldEnum[]
  }


  /**
   * PartkingSpot create
   */
  export type PartkingSpotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    /**
     * The data needed to create a PartkingSpot.
     */
    data: XOR<PartkingSpotCreateInput, PartkingSpotUncheckedCreateInput>
  }


  /**
   * PartkingSpot createMany
   */
  export type PartkingSpotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PartkingSpots.
     */
    data: PartkingSpotCreateManyInput | PartkingSpotCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PartkingSpot update
   */
  export type PartkingSpotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    /**
     * The data needed to update a PartkingSpot.
     */
    data: XOR<PartkingSpotUpdateInput, PartkingSpotUncheckedUpdateInput>
    /**
     * Choose, which PartkingSpot to update.
     */
    where: PartkingSpotWhereUniqueInput
  }


  /**
   * PartkingSpot updateMany
   */
  export type PartkingSpotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PartkingSpots.
     */
    data: XOR<PartkingSpotUpdateManyMutationInput, PartkingSpotUncheckedUpdateManyInput>
    /**
     * Filter which PartkingSpots to update
     */
    where?: PartkingSpotWhereInput
  }


  /**
   * PartkingSpot upsert
   */
  export type PartkingSpotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    /**
     * The filter to search for the PartkingSpot to update in case it exists.
     */
    where: PartkingSpotWhereUniqueInput
    /**
     * In case the PartkingSpot found by the `where` argument doesn't exist, create a new PartkingSpot with this data.
     */
    create: XOR<PartkingSpotCreateInput, PartkingSpotUncheckedCreateInput>
    /**
     * In case the PartkingSpot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartkingSpotUpdateInput, PartkingSpotUncheckedUpdateInput>
  }


  /**
   * PartkingSpot delete
   */
  export type PartkingSpotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
    /**
     * Filter which PartkingSpot to delete.
     */
    where: PartkingSpotWhereUniqueInput
  }


  /**
   * PartkingSpot deleteMany
   */
  export type PartkingSpotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PartkingSpots to delete
     */
    where?: PartkingSpotWhereInput
  }


  /**
   * PartkingSpot without action
   */
  export type PartkingSpotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartkingSpot
     */
    select?: PartkingSpotSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PartkingSpotInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ParkingLotScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ParkingLotScalarFieldEnum = (typeof ParkingLotScalarFieldEnum)[keyof typeof ParkingLotScalarFieldEnum]


  export const PartkingSpotScalarFieldEnum: {
    id: 'id',
    parkingLotId: 'parkingLotId',
    floorNumber: 'floorNumber',
    vehicleType: 'vehicleType'
  };

  export type PartkingSpotScalarFieldEnum = (typeof PartkingSpotScalarFieldEnum)[keyof typeof PartkingSpotScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'VehicleType'
   */
  export type EnumVehicleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VehicleType'>
    


  /**
   * Reference to a field of type 'VehicleType[]'
   */
  export type ListEnumVehicleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VehicleType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ParkingLotWhereInput = {
    AND?: ParkingLotWhereInput | ParkingLotWhereInput[]
    OR?: ParkingLotWhereInput[]
    NOT?: ParkingLotWhereInput | ParkingLotWhereInput[]
    id?: IntFilter<"ParkingLot"> | number
    name?: StringFilter<"ParkingLot"> | string
    partkingSpots?: PartkingSpotListRelationFilter
  }

  export type ParkingLotOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    partkingSpots?: PartkingSpotOrderByRelationAggregateInput
  }

  export type ParkingLotWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ParkingLotWhereInput | ParkingLotWhereInput[]
    OR?: ParkingLotWhereInput[]
    NOT?: ParkingLotWhereInput | ParkingLotWhereInput[]
    name?: StringFilter<"ParkingLot"> | string
    partkingSpots?: PartkingSpotListRelationFilter
  }, "id">

  export type ParkingLotOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ParkingLotCountOrderByAggregateInput
    _avg?: ParkingLotAvgOrderByAggregateInput
    _max?: ParkingLotMaxOrderByAggregateInput
    _min?: ParkingLotMinOrderByAggregateInput
    _sum?: ParkingLotSumOrderByAggregateInput
  }

  export type ParkingLotScalarWhereWithAggregatesInput = {
    AND?: ParkingLotScalarWhereWithAggregatesInput | ParkingLotScalarWhereWithAggregatesInput[]
    OR?: ParkingLotScalarWhereWithAggregatesInput[]
    NOT?: ParkingLotScalarWhereWithAggregatesInput | ParkingLotScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ParkingLot"> | number
    name?: StringWithAggregatesFilter<"ParkingLot"> | string
  }

  export type PartkingSpotWhereInput = {
    AND?: PartkingSpotWhereInput | PartkingSpotWhereInput[]
    OR?: PartkingSpotWhereInput[]
    NOT?: PartkingSpotWhereInput | PartkingSpotWhereInput[]
    id?: IntFilter<"PartkingSpot"> | number
    parkingLotId?: IntFilter<"PartkingSpot"> | number
    floorNumber?: IntFilter<"PartkingSpot"> | number
    vehicleType?: EnumVehicleTypeFilter<"PartkingSpot"> | $Enums.VehicleType
    parkingLot?: XOR<ParkingLotRelationFilter, ParkingLotWhereInput>
  }

  export type PartkingSpotOrderByWithRelationInput = {
    id?: SortOrder
    parkingLotId?: SortOrder
    floorNumber?: SortOrder
    vehicleType?: SortOrder
    parkingLot?: ParkingLotOrderByWithRelationInput
  }

  export type PartkingSpotWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PartkingSpotWhereInput | PartkingSpotWhereInput[]
    OR?: PartkingSpotWhereInput[]
    NOT?: PartkingSpotWhereInput | PartkingSpotWhereInput[]
    parkingLotId?: IntFilter<"PartkingSpot"> | number
    floorNumber?: IntFilter<"PartkingSpot"> | number
    vehicleType?: EnumVehicleTypeFilter<"PartkingSpot"> | $Enums.VehicleType
    parkingLot?: XOR<ParkingLotRelationFilter, ParkingLotWhereInput>
  }, "id">

  export type PartkingSpotOrderByWithAggregationInput = {
    id?: SortOrder
    parkingLotId?: SortOrder
    floorNumber?: SortOrder
    vehicleType?: SortOrder
    _count?: PartkingSpotCountOrderByAggregateInput
    _avg?: PartkingSpotAvgOrderByAggregateInput
    _max?: PartkingSpotMaxOrderByAggregateInput
    _min?: PartkingSpotMinOrderByAggregateInput
    _sum?: PartkingSpotSumOrderByAggregateInput
  }

  export type PartkingSpotScalarWhereWithAggregatesInput = {
    AND?: PartkingSpotScalarWhereWithAggregatesInput | PartkingSpotScalarWhereWithAggregatesInput[]
    OR?: PartkingSpotScalarWhereWithAggregatesInput[]
    NOT?: PartkingSpotScalarWhereWithAggregatesInput | PartkingSpotScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PartkingSpot"> | number
    parkingLotId?: IntWithAggregatesFilter<"PartkingSpot"> | number
    floorNumber?: IntWithAggregatesFilter<"PartkingSpot"> | number
    vehicleType?: EnumVehicleTypeWithAggregatesFilter<"PartkingSpot"> | $Enums.VehicleType
  }

  export type ParkingLotCreateInput = {
    name: string
    partkingSpots?: PartkingSpotCreateNestedManyWithoutParkingLotInput
  }

  export type ParkingLotUncheckedCreateInput = {
    id?: number
    name: string
    partkingSpots?: PartkingSpotUncheckedCreateNestedManyWithoutParkingLotInput
  }

  export type ParkingLotUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    partkingSpots?: PartkingSpotUpdateManyWithoutParkingLotNestedInput
  }

  export type ParkingLotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    partkingSpots?: PartkingSpotUncheckedUpdateManyWithoutParkingLotNestedInput
  }

  export type ParkingLotCreateManyInput = {
    id?: number
    name: string
  }

  export type ParkingLotUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ParkingLotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PartkingSpotCreateInput = {
    floorNumber: number
    vehicleType?: $Enums.VehicleType
    parkingLot: ParkingLotCreateNestedOneWithoutPartkingSpotsInput
  }

  export type PartkingSpotUncheckedCreateInput = {
    id?: number
    parkingLotId: number
    floorNumber: number
    vehicleType?: $Enums.VehicleType
  }

  export type PartkingSpotUpdateInput = {
    floorNumber?: IntFieldUpdateOperationsInput | number
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    parkingLot?: ParkingLotUpdateOneRequiredWithoutPartkingSpotsNestedInput
  }

  export type PartkingSpotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    parkingLotId?: IntFieldUpdateOperationsInput | number
    floorNumber?: IntFieldUpdateOperationsInput | number
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type PartkingSpotCreateManyInput = {
    id?: number
    parkingLotId: number
    floorNumber: number
    vehicleType?: $Enums.VehicleType
  }

  export type PartkingSpotUpdateManyMutationInput = {
    floorNumber?: IntFieldUpdateOperationsInput | number
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type PartkingSpotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    parkingLotId?: IntFieldUpdateOperationsInput | number
    floorNumber?: IntFieldUpdateOperationsInput | number
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PartkingSpotListRelationFilter = {
    every?: PartkingSpotWhereInput
    some?: PartkingSpotWhereInput
    none?: PartkingSpotWhereInput
  }

  export type PartkingSpotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParkingLotCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ParkingLotAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParkingLotMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ParkingLotMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ParkingLotSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumVehicleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleType | EnumVehicleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleTypeFilter<$PrismaModel> | $Enums.VehicleType
  }

  export type ParkingLotRelationFilter = {
    is?: ParkingLotWhereInput
    isNot?: ParkingLotWhereInput
  }

  export type PartkingSpotCountOrderByAggregateInput = {
    id?: SortOrder
    parkingLotId?: SortOrder
    floorNumber?: SortOrder
    vehicleType?: SortOrder
  }

  export type PartkingSpotAvgOrderByAggregateInput = {
    id?: SortOrder
    parkingLotId?: SortOrder
    floorNumber?: SortOrder
  }

  export type PartkingSpotMaxOrderByAggregateInput = {
    id?: SortOrder
    parkingLotId?: SortOrder
    floorNumber?: SortOrder
    vehicleType?: SortOrder
  }

  export type PartkingSpotMinOrderByAggregateInput = {
    id?: SortOrder
    parkingLotId?: SortOrder
    floorNumber?: SortOrder
    vehicleType?: SortOrder
  }

  export type PartkingSpotSumOrderByAggregateInput = {
    id?: SortOrder
    parkingLotId?: SortOrder
    floorNumber?: SortOrder
  }

  export type EnumVehicleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleType | EnumVehicleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleTypeWithAggregatesFilter<$PrismaModel> | $Enums.VehicleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVehicleTypeFilter<$PrismaModel>
    _max?: NestedEnumVehicleTypeFilter<$PrismaModel>
  }

  export type PartkingSpotCreateNestedManyWithoutParkingLotInput = {
    create?: XOR<PartkingSpotCreateWithoutParkingLotInput, PartkingSpotUncheckedCreateWithoutParkingLotInput> | PartkingSpotCreateWithoutParkingLotInput[] | PartkingSpotUncheckedCreateWithoutParkingLotInput[]
    connectOrCreate?: PartkingSpotCreateOrConnectWithoutParkingLotInput | PartkingSpotCreateOrConnectWithoutParkingLotInput[]
    createMany?: PartkingSpotCreateManyParkingLotInputEnvelope
    connect?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
  }

  export type PartkingSpotUncheckedCreateNestedManyWithoutParkingLotInput = {
    create?: XOR<PartkingSpotCreateWithoutParkingLotInput, PartkingSpotUncheckedCreateWithoutParkingLotInput> | PartkingSpotCreateWithoutParkingLotInput[] | PartkingSpotUncheckedCreateWithoutParkingLotInput[]
    connectOrCreate?: PartkingSpotCreateOrConnectWithoutParkingLotInput | PartkingSpotCreateOrConnectWithoutParkingLotInput[]
    createMany?: PartkingSpotCreateManyParkingLotInputEnvelope
    connect?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PartkingSpotUpdateManyWithoutParkingLotNestedInput = {
    create?: XOR<PartkingSpotCreateWithoutParkingLotInput, PartkingSpotUncheckedCreateWithoutParkingLotInput> | PartkingSpotCreateWithoutParkingLotInput[] | PartkingSpotUncheckedCreateWithoutParkingLotInput[]
    connectOrCreate?: PartkingSpotCreateOrConnectWithoutParkingLotInput | PartkingSpotCreateOrConnectWithoutParkingLotInput[]
    upsert?: PartkingSpotUpsertWithWhereUniqueWithoutParkingLotInput | PartkingSpotUpsertWithWhereUniqueWithoutParkingLotInput[]
    createMany?: PartkingSpotCreateManyParkingLotInputEnvelope
    set?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
    disconnect?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
    delete?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
    connect?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
    update?: PartkingSpotUpdateWithWhereUniqueWithoutParkingLotInput | PartkingSpotUpdateWithWhereUniqueWithoutParkingLotInput[]
    updateMany?: PartkingSpotUpdateManyWithWhereWithoutParkingLotInput | PartkingSpotUpdateManyWithWhereWithoutParkingLotInput[]
    deleteMany?: PartkingSpotScalarWhereInput | PartkingSpotScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PartkingSpotUncheckedUpdateManyWithoutParkingLotNestedInput = {
    create?: XOR<PartkingSpotCreateWithoutParkingLotInput, PartkingSpotUncheckedCreateWithoutParkingLotInput> | PartkingSpotCreateWithoutParkingLotInput[] | PartkingSpotUncheckedCreateWithoutParkingLotInput[]
    connectOrCreate?: PartkingSpotCreateOrConnectWithoutParkingLotInput | PartkingSpotCreateOrConnectWithoutParkingLotInput[]
    upsert?: PartkingSpotUpsertWithWhereUniqueWithoutParkingLotInput | PartkingSpotUpsertWithWhereUniqueWithoutParkingLotInput[]
    createMany?: PartkingSpotCreateManyParkingLotInputEnvelope
    set?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
    disconnect?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
    delete?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
    connect?: PartkingSpotWhereUniqueInput | PartkingSpotWhereUniqueInput[]
    update?: PartkingSpotUpdateWithWhereUniqueWithoutParkingLotInput | PartkingSpotUpdateWithWhereUniqueWithoutParkingLotInput[]
    updateMany?: PartkingSpotUpdateManyWithWhereWithoutParkingLotInput | PartkingSpotUpdateManyWithWhereWithoutParkingLotInput[]
    deleteMany?: PartkingSpotScalarWhereInput | PartkingSpotScalarWhereInput[]
  }

  export type ParkingLotCreateNestedOneWithoutPartkingSpotsInput = {
    create?: XOR<ParkingLotCreateWithoutPartkingSpotsInput, ParkingLotUncheckedCreateWithoutPartkingSpotsInput>
    connectOrCreate?: ParkingLotCreateOrConnectWithoutPartkingSpotsInput
    connect?: ParkingLotWhereUniqueInput
  }

  export type EnumVehicleTypeFieldUpdateOperationsInput = {
    set?: $Enums.VehicleType
  }

  export type ParkingLotUpdateOneRequiredWithoutPartkingSpotsNestedInput = {
    create?: XOR<ParkingLotCreateWithoutPartkingSpotsInput, ParkingLotUncheckedCreateWithoutPartkingSpotsInput>
    connectOrCreate?: ParkingLotCreateOrConnectWithoutPartkingSpotsInput
    upsert?: ParkingLotUpsertWithoutPartkingSpotsInput
    connect?: ParkingLotWhereUniqueInput
    update?: XOR<XOR<ParkingLotUpdateToOneWithWhereWithoutPartkingSpotsInput, ParkingLotUpdateWithoutPartkingSpotsInput>, ParkingLotUncheckedUpdateWithoutPartkingSpotsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumVehicleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleType | EnumVehicleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleTypeFilter<$PrismaModel> | $Enums.VehicleType
  }

  export type NestedEnumVehicleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleType | EnumVehicleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleTypeWithAggregatesFilter<$PrismaModel> | $Enums.VehicleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVehicleTypeFilter<$PrismaModel>
    _max?: NestedEnumVehicleTypeFilter<$PrismaModel>
  }

  export type PartkingSpotCreateWithoutParkingLotInput = {
    floorNumber: number
    vehicleType?: $Enums.VehicleType
  }

  export type PartkingSpotUncheckedCreateWithoutParkingLotInput = {
    id?: number
    floorNumber: number
    vehicleType?: $Enums.VehicleType
  }

  export type PartkingSpotCreateOrConnectWithoutParkingLotInput = {
    where: PartkingSpotWhereUniqueInput
    create: XOR<PartkingSpotCreateWithoutParkingLotInput, PartkingSpotUncheckedCreateWithoutParkingLotInput>
  }

  export type PartkingSpotCreateManyParkingLotInputEnvelope = {
    data: PartkingSpotCreateManyParkingLotInput | PartkingSpotCreateManyParkingLotInput[]
    skipDuplicates?: boolean
  }

  export type PartkingSpotUpsertWithWhereUniqueWithoutParkingLotInput = {
    where: PartkingSpotWhereUniqueInput
    update: XOR<PartkingSpotUpdateWithoutParkingLotInput, PartkingSpotUncheckedUpdateWithoutParkingLotInput>
    create: XOR<PartkingSpotCreateWithoutParkingLotInput, PartkingSpotUncheckedCreateWithoutParkingLotInput>
  }

  export type PartkingSpotUpdateWithWhereUniqueWithoutParkingLotInput = {
    where: PartkingSpotWhereUniqueInput
    data: XOR<PartkingSpotUpdateWithoutParkingLotInput, PartkingSpotUncheckedUpdateWithoutParkingLotInput>
  }

  export type PartkingSpotUpdateManyWithWhereWithoutParkingLotInput = {
    where: PartkingSpotScalarWhereInput
    data: XOR<PartkingSpotUpdateManyMutationInput, PartkingSpotUncheckedUpdateManyWithoutParkingLotInput>
  }

  export type PartkingSpotScalarWhereInput = {
    AND?: PartkingSpotScalarWhereInput | PartkingSpotScalarWhereInput[]
    OR?: PartkingSpotScalarWhereInput[]
    NOT?: PartkingSpotScalarWhereInput | PartkingSpotScalarWhereInput[]
    id?: IntFilter<"PartkingSpot"> | number
    parkingLotId?: IntFilter<"PartkingSpot"> | number
    floorNumber?: IntFilter<"PartkingSpot"> | number
    vehicleType?: EnumVehicleTypeFilter<"PartkingSpot"> | $Enums.VehicleType
  }

  export type ParkingLotCreateWithoutPartkingSpotsInput = {
    name: string
  }

  export type ParkingLotUncheckedCreateWithoutPartkingSpotsInput = {
    id?: number
    name: string
  }

  export type ParkingLotCreateOrConnectWithoutPartkingSpotsInput = {
    where: ParkingLotWhereUniqueInput
    create: XOR<ParkingLotCreateWithoutPartkingSpotsInput, ParkingLotUncheckedCreateWithoutPartkingSpotsInput>
  }

  export type ParkingLotUpsertWithoutPartkingSpotsInput = {
    update: XOR<ParkingLotUpdateWithoutPartkingSpotsInput, ParkingLotUncheckedUpdateWithoutPartkingSpotsInput>
    create: XOR<ParkingLotCreateWithoutPartkingSpotsInput, ParkingLotUncheckedCreateWithoutPartkingSpotsInput>
    where?: ParkingLotWhereInput
  }

  export type ParkingLotUpdateToOneWithWhereWithoutPartkingSpotsInput = {
    where?: ParkingLotWhereInput
    data: XOR<ParkingLotUpdateWithoutPartkingSpotsInput, ParkingLotUncheckedUpdateWithoutPartkingSpotsInput>
  }

  export type ParkingLotUpdateWithoutPartkingSpotsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ParkingLotUncheckedUpdateWithoutPartkingSpotsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PartkingSpotCreateManyParkingLotInput = {
    id?: number
    floorNumber: number
    vehicleType?: $Enums.VehicleType
  }

  export type PartkingSpotUpdateWithoutParkingLotInput = {
    floorNumber?: IntFieldUpdateOperationsInput | number
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type PartkingSpotUncheckedUpdateWithoutParkingLotInput = {
    id?: IntFieldUpdateOperationsInput | number
    floorNumber?: IntFieldUpdateOperationsInput | number
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type PartkingSpotUncheckedUpdateManyWithoutParkingLotInput = {
    id?: IntFieldUpdateOperationsInput | number
    floorNumber?: IntFieldUpdateOperationsInput | number
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ParkingLotCountOutputTypeDefaultArgs instead
     */
    export type ParkingLotCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParkingLotCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParkingLotDefaultArgs instead
     */
    export type ParkingLotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParkingLotDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartkingSpotDefaultArgs instead
     */
    export type PartkingSpotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartkingSpotDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}